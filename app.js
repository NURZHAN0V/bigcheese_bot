const fs = require('fs');
const csv = require('csv-parser');
const axios = require('axios');

// === –ù–ê–°–¢–†–û–ô–ö–ò ===
const STRAPI_URL = 'https://love.bigcheese.fun'; // –ê–¥—Ä–µ—Å —Ç–≤–æ–µ–≥–æ Strapi
const API_TOKEN = '6e7c9406b321a13cb0d84b7556608e62c57ec6e95de53a49a034bb4831ac56367395ebf7f47c58033d62cfdf6113ea7ae026fb9b0e24ee27410ba8dcccb07d64e6548862017e687ef73dc3bd8152c5f38d72013e53ca165a96a47b59d7a9db2f622a2e82fd96abb4d3f66cf7c77070ff682bdfb8b96d97856cce4361a44d1eec';
const CONTENT_TYPE = 'words'; // –ù–∞–ø—Ä–∏–º–µ—Ä: 'words', 'es-words', 'it-words' ‚Äî –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é
const CSV_FILE = 'import/test.csv';

// === –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö ===
if (!STRAPI_URL || STRAPI_URL.trim() === '') {
  console.error('‚ùå STRAPI_URL –Ω–µ —É–∫–∞–∑–∞–Ω!');
  process.exit(1);
}

if (!API_TOKEN || API_TOKEN.trim() === '') {
  console.error('‚ùå API_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω!');
  process.exit(1);
}

if (!CONTENT_TYPE || CONTENT_TYPE.trim() === '') {
  console.error('‚ùå CONTENT_TYPE –Ω–µ —É–∫–∞–∑–∞–Ω!');
  process.exit(1);
}

if (!CSV_FILE || CSV_FILE.trim() === '') {
  console.error('‚ùå CSV_FILE –Ω–µ —É–∫–∞–∑–∞–Ω!');
  process.exit(1);
}

// === –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–ê ===
if (!fs.existsSync(CSV_FILE)) {
  console.error(`‚ùå –§–∞–π–ª ${CSV_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
  console.error('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ —Å–∫—Ä–∏–ø—Ç.');
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
const stats = fs.statSync(CSV_FILE);
if (stats.size === 0) {
  console.error(`‚ùå –§–∞–π–ª ${CSV_FILE} –ø—É—Å—Ç–æ–π!`);
  process.exit(1);
}

// === –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• ===
const validateRow = (row) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ row —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º
  if (!row || typeof row !== 'object') {
    return '–°—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º';
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ CSV
  const hasHeaders = Object.keys(row).some(key => 
    ['en', 'ru', 'es', 'it'].includes(key)
  );
  
  if (!hasHeaders) {
    return '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ CSV —Ñ–∞–π–ª–µ. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: en,ru,fontSize,answerTime,correctAnswer)';
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  let requiredFields;
  
  switch (CONTENT_TYPE) {
    case 'words':
    case 'ko-words':
      requiredFields = ['en', 'ru'];
      break;
    case 'es-words':
      requiredFields = ['ru', 'es'];
      break;
    case 'it-words':
      requiredFields = ['it', 'ru'];
      break;
    default:
      console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${CONTENT_TYPE}`);
      return `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${CONTENT_TYPE}`;
  }
  
  for (const field of requiredFields) {
    if (!row[field] || row[field].toString().trim() === '') {
      return `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: ${field}`;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
  if (row.fontSize !== undefined && row.fontSize !== null && row.fontSize !== '') {
    const fontSize = Number(row.fontSize);
    if (isNaN(fontSize) || fontSize <= 0 || fontSize > 100) {
      return 'fontSize –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 100';
    }
  }
  
  if (row.answerTime !== undefined && row.answerTime !== null && row.answerTime !== '') {
    const answerTime = Number(row.answerTime);
    if (isNaN(answerTime) || answerTime <= 0 || answerTime > 300) {
      return 'answerTime –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 300 —Å–µ–∫—É–Ω–¥';
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ boolean –ø–æ–ª—è
  if (row.correctAnswer !== undefined && row.correctAnswer !== null && row.correctAnswer !== '') {
    const correctAnswer = row.correctAnswer.toString().toLowerCase();
    if (!['true', 'false', '1', '0', 'yes', 'no'].includes(correctAnswer)) {
      return 'correctAnswer –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å true/false, 1/0, yes/no';
    }
  }
  
  return null;
};

// === –§–£–ù–ö–¶–ò–Ø –ò–ú–ü–û–†–¢–ê –û–î–ù–û–ô –°–¢–†–û–ö–ò ===
const importRow = async (row) => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const validationError = validateRow(row);
    if (validationError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validationError}`);
      console.error('‚Üí –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:', row);
      return false; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const dataToSend = {
      ...row,
      fontSize: row.fontSize ? Number(row.fontSize) : 16,
      answerTime: row.answerTime ? Number(row.answerTime) : 30,
      correctAnswer: row.correctAnswer ? 
        ['true', '1', 'yes'].includes(row.correctAnswer.toString().toLowerCase()) : 
        true
    };

    // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
    Object.keys(dataToSend).forEach(key => {
      if (dataToSend[key] === '' || dataToSend[key] === null || dataToSend[key] === undefined) {
        delete dataToSend[key];
      }
    });

    const res = await axios.post(`${STRAPI_URL}/api/${CONTENT_TYPE}`, {
      data: dataToSend
    }, {
      headers: {
        Authorization: `Bearer ${API_TOKEN}`,
        'Content-Type': 'application/json'
      },
      timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });

    if (res.data && res.data.data && res.data.data.id) {
      console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ID ${res.data.data.id}`);
    } else {
      console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${JSON.stringify(res.data)}`);
    }
    return true; // –£—Å–ø–µ—à–Ω—ã–π –∏–º–ø–æ—Ä—Ç
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å—Ç—Ä–æ–∫–∏:`, row);
    if (error.response) {
      console.error('‚Üí –°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('‚Üí –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', error.response.data);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
      if (error.response.status === 401) {
        console.error('‚Üí –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API —Ç–æ–∫–µ–Ω–∞');
      } else if (error.response.status === 403) {
        console.error('‚Üí –£ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π');
      } else if (error.response.status === 404) {
        console.error('‚Üí –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ CONTENT_TYPE');
      } else if (error.response.status === 422) {
        console.error('‚Üí –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
      } else if (error.response.status === 429) {
        console.error('‚Üí –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
      } else if (error.response.status >= 500) {
        console.error('‚Üí –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
      }
    } else if (error.code === 'ECONNABORTED') {
      console.error('‚Üí –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (10 —Å–µ–∫—É–Ω–¥)');
    } else if (error.code === 'ENOTFOUND') {
      console.error('‚Üí –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
    } else if (error.code === 'ECONNREFUSED') {
      console.error('‚Üí –°–µ—Ä–≤–µ—Ä –æ—Ç–∫–∞–∑–∞–ª –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏');
    } else if (error.code === 'ETIMEDOUT') {
      console.error('‚Üí –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    } else {
      console.error('‚Üí', error.message);
    }
    return false; // –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
  }
};

// === –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö –ò –ó–ê–í–ï–†–®–ï–ù–ò–ï ===
let processedRows = 0;
let errorCount = 0;
let validationErrors = 0;
let successCount = 0;

const processRow = async (row) => {
  try {
    const result = await importRow(row);
    if (result) {
      successCount++;
    } else {
      validationErrors++;
    }
    processedRows++;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏:', error.message);
    errorCount++;
  }
};

// === –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê ===
console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞: ${CSV_FILE}`);
console.log(`üìä –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${CONTENT_TYPE}`);
console.log(`üåê –°–µ—Ä–≤–µ—Ä: ${STRAPI_URL}`);
console.log('‚îÄ'.repeat(50));

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
let csvHeaders;
switch (CONTENT_TYPE) {
  case 'words':
  case 'ko-words':
    csvHeaders = ['en', 'ru', 'fontSize', 'answerTime', 'correctAnswer'];
    break;
  case 'es-words':
    csvHeaders = ['ru', 'es', 'fontSize', 'answerTime', 'correctAnswer'];
    break;
  case 'it-words':
    csvHeaders = ['it', 'ru', 'fontSize', 'answerTime', 'correctAnswer'];
    break;
  default:
    console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${CONTENT_TYPE}`);
    process.exit(1);
}

let rowCount = 0;
let dataRowCount = 0;
let isFirstRow = true;

fs.createReadStream(CSV_FILE)
  .pipe(csv({ headers: csvHeaders }))
  .on('data', (row) => {
    rowCount++;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (isFirstRow) {
      isFirstRow = false;
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
      const hasHeaders = Object.keys(row).some(key => 
        ['en', 'ru', 'es', 'it'].includes(key)
      );
      if (hasHeaders) {
        console.log('üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ CSV —Ñ–∞–π–ª–µ');
        return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      }
    }
    
    dataRowCount++; // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
    processRow(row).catch(error => {
      console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
      errorCount++;
    });
  })
  .on('end', () => {
    setTimeout(() => {
      console.log('‚îÄ'.repeat(50));
      console.log('üèÅ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.');
      console.log(`üìà –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: ${rowCount} (–≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏)`);
      console.log(`üìä –°—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏: ${dataRowCount}`);
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${successCount}`);
      console.log(`‚ö†Ô∏è –û—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validationErrors}`);
      if (errorCount > 0) {
        console.log(`‚ùå –û—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞: ${errorCount}`);
      }
      
      // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const totalProcessed = successCount + validationErrors + errorCount;
      if (totalProcessed > 0) {
        const successRate = ((successCount / totalProcessed) * 100).toFixed(1);
        console.log(`üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);
      }
    }, 1000); // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  })
  .on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error.message);
    if (error.code === 'ENOENT') {
      console.error('‚Üí –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    } else if (error.code === 'EACCES') {
      console.error('‚Üí –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞');
    } else if (error.code === 'EISDIR') {
      console.error('‚Üí –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π, –∞ –Ω–µ —Ñ–∞–π–ª–æ–º');
    } else if (error.code === 'ENOTFOUND') {
      console.error('‚Üí –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏');
    }
    process.exit(1);
  });